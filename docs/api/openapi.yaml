openapi: 3.0.3
info:
  title: ToDo API
  version: v1
  description: Simple Todo API
servers:
  - url: https://api.example.com/v1
    description: example server
paths:
  /users:
    get:
      summary: Get All Users
      description: Get All Users
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      summary: Create User
      description: Create User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        '201':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
  /users/{id}:
    get:
      summary: Get By Id
      description: Get By Id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
    patch:
      summary: Update User
      description: Update User
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
    delete:
      summary: Delete User
      description: Delete User
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Successful Response
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
  /users/username/{username}:
    get:
      summary: Get User By Username
      description: Get User By Username
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
  /users/{owner_id}/tasks:
    get:
      summary: Get All Tasks By Owner
      description: Get All Tasks By Owner
      parameters:
        - name: owner_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
  /tasks:
    get:
      summary: Get All Tasks
      description: Get All Tasks
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
    post:
      summary: Create Task
      description: Create Task
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskCreate'
      responses:
        '201':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
  /tasks/{id}:
    get:
      summary: Get Task By Id
      description: Get Task By Id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
    patch:
      summary: Update Task
      description: Update Task
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskUpdate'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
    delete:
      summary: Delete Task
      description: Delete Task
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Successful Response
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
components:
  schemas:
    Status:
      type: string
      enum:
        - ToDo
        - Doing
        - Done
      example: ToDo
    User:
      type: object
      properties:
        id:
          type: integer
          example: 0
        username:
          type: string
          example: string
        email:
          type: string
          format: email
          example: user@example.com
        first_name:
          type: string
          example: string
        last_name:
          type: string
          example: string
        created_at:
          type: string
          format: date-time
          example: 2006-01-02T15:04:05.000Z
        updated_at:
          type: string
          format: date-time
          example: 2006-01-02T15:04:05.000Z
    UserCreate:
      type: object
      required:
        - username
        - email
        - first_name
        - last_name
      properties:
        username:
          type: string
          example: string
        email:
          type: string
          format: email
          example: user@example.com
        first_name:
          type: string
          example: string
        last_name:
          type: string
          example: string
    UserUpdate:
      type: object
      properties:
        username:
          type: string
          example: string
        email:
          type: string
          format: email
          example: user@example.com
        first_name:
          type: string
          example: string
        last_name:
          type: string
          example: string
    Task:
      type: object
      properties:
        id:
          type: integer
          example: 0
        title:
          type: string
          example: string
        description:
          type: string
          example: string
        due_date:
          type: string
          format: date
          example: 2006-01-02
        status:
          $ref: '#/components/schemas/Status'
        owner_id:
          type: integer
          example: 0
        created_at:
          type: string
          format: date-time
          example: 2006-01-02T15:04:05.000Z
        updated_at:
          type: string
          format: date-time
          example: 2006-01-02T15:04:05.000Z
    TaskCreate:
      type: object
      required:
        - title
        - description
        - due_date
        - status
        - owner_id
      properties:
        title:
          type: string
          example: string
        description:
          type: string
          example: string
        due_date:
          type: string
          format: date
          example: 2006-01-02
        status:
          $ref: '#/components/schemas/Status'
        owner_id:
          type: integer
          example: 0
    TaskUpdate:
      type: object
      properties:
        title:
          type: string
          example: string
        description:
          type: string
          example: string
        due_date:
          type: string
          format: date
          example: 2006-01-02
        status:
          $ref: '#/components/schemas/Status'
        owner_id:
          type: integer
          example: 0
    ValidationError:
      type: object
      properties:
        detail:
          type: array
          items:
            type: object
            properties:
              loc:
                type: array
                items:
                  oneOf:
                    - type: string
                    - type: integer
                example: ["string", 0]
              msg:
                type: string
                example: string
              type:
                type: string
                example: string
